import socket
from secure_vault import SecureVault
from socket_helper import SocketHelper
from util import (
    list_xor,
    xor,
    decrypt,
    generate_challenge,
    generate_session_key,
    unpack_M4
  )

def main():
  SERVER_HOST = '127.0.0.1'
  SERVER_PORT = 12345

  ID = 16
  SESSION_ID = 1

  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
    client_socket.connect((SERVER_HOST, SERVER_PORT))

    socket_util = SocketHelper(client_socket)

    sv = SecureVault("client")

    K = sv.load_secure_vault()

    socket_util.sendM1(ID, SESSION_ID)
    #------------------------------------------------
    C1, r1 = socket_util.receiveM2()

    # First, it generates a temporary key k1 of size m bits by performing 
    # XOR operation on all the keys whose indices are in C1.
    k1 = list_xor([K[i] for i in C1])

    # Here, t1 is a random number generated by the IoT device, which is further used to generate 
    # a session key t.
    t1 = generate_session_key()
    C2, r2 = generate_challenge(SecureVault.N)
    socket_util.sendM3(k1, r1, t1, C2, r2)
    #------------------------------------------------
    M4 = socket_util.receiveM4()
    k2 = list_xor([K[i] for i in C2])
    payload = decrypt(xor(k2, t1), M4).decode()

    r2_server, t2 = unpack_M4(payload)

    if (r2_server != r2):
      print("Error: r2 mismatch")
      return
    T = xor(t1, t2)

    #------------------------------------------------
    msg_server = socket_util.receiveMessageEncrypted(T)
    print(f"Msg: {msg_server.decode()}")
    sv.update_secure_vault(msg_server)


if __name__ == "__main__":
  #SecureVault.regen_secure_vault()
  main()
