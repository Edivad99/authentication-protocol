import socket
import uuid
import random
import secure_vault
from util import covert_str_list_to_int_list, xor, encrypt, decrypt, generate_challenge, list_xor, generate_session_key
from socket_util import SocketUtil


random.seed(42)

def main():
  SERVER_HOST = '127.0.0.1'
  SERVER_PORT = 12345

  ID = 16 #uuid.uuid4()
  SESSION_ID = 1

  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
    client_socket.connect((SERVER_HOST, SERVER_PORT))

    socket_util = SocketUtil(client_socket)

    K = secure_vault.load_secure_vault()

    # Invia i dati al server
    socket_util.sendM1(ID, SESSION_ID)
    #------------------------------------------------
    C1, r1 = socket_util.receiveM2()

    # First, it generates a temporary key k1 of size m bits by performing 
    # XOR operation on all the keys whose indices are in C1.
    k1 = list_xor([K[i] for i in C1])

    print(f"k1: {k1}")
    print(f"k1_len: {len(k1)}")
    # The IoT device creates the response for the challenge by performing shared key 
    # encryption on r1 || t1 using k1 as the encryption key.
    # Here, t1 is a random number generated by the IoT device, which is further used to generate 
    # a session key t.
    t1 = generate_session_key()
    # perform shared key encryption on r1 || t1 using k1 as the encryption key
    C2, r2 = generate_challenge(secure_vault.N)
    payload = f"{r1}#{list(t1)}#{C2}#{r2}"
    print(f"payload: {payload}")
    M3 = encrypt(k1, payload.encode())
    socket_util.sendM3(M3)
    #------------------------------------------------
    M4 = socket_util.receiveM4()
    print(f"M4: {M4}")
    k2 = list_xor([K[i] for i in C2])
    print(f"k2: {k2}")
    t1 = bytes(str(list(t1)), 'utf-8')
    xor_result = xor(k2, t1)
    print(f"t1: {t1}")
    payload = decrypt(xor_result, M4).decode()
    print(f"payload: {payload}")

    if (int(payload.split("#")[0]) != r2):
      print("Errore: r2 non corrisponde")
      return
    t2 = payload.split("#")[1]
    t2 = bytes(t2, 'utf-8')
    print(type(t2))
    print(f"t2: {t2}")
    
    t = xor(t1, t2)
    print(f"t: {t}")


if __name__ == "__main__":
  #secure_vault.regen_secure_vault()
  main()
