import socket
import uuid
import random
import secure_vault
from util import covert_str_list_to_int_list, xor, encrypt, decrypt, generate_challenge, list_xor, generate_session_key

random.seed(42)

def main():
  SERVER_HOST = '127.0.0.1'
  SERVER_PORT = 12345

  ID = 16 #uuid.uuid4()
  SESSION_ID = 1

  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
    client_socket.connect((SERVER_HOST, SERVER_PORT))

    K = secure_vault.load_secure_vault()

    # Invia i dati al server
    M1 = str(ID) + "#" + str(SESSION_ID)
    client_socket.sendall(str(M1).encode())
    #------------------------------------------------

    data_received = client_socket.recv(1024)

    M2 = data_received.decode()
    print(f"M2: {M2}")
    C1 = covert_str_list_to_int_list(M2.split("#")[0])
    print(f"C1: {C1}")
    r1 = int(M2.split("#")[1])

    # First, it generates a temporary key k1 of size m bits by performing 
    # XOR operation on all the keys whose indices are in C1.
    k1 = list_xor([K[i] for i in C1])

    print(f"k1: {k1}")
    print(f"k1_len: {len(k1)}")
    # The IoT device creates the response for the challenge by performing shared key 
    # encryption on r1 || t1 using k1 as the encryption key.
    # Here, t1 is a random number generated by the IoT device, which is further used to generate 
    # a session key t.
    t1 = generate_session_key()
    # perform shared key encryption on r1 || t1 using k1 as the encryption key
    concat = (str(r1) + str(t1)).encode()
    print(f"concat: {concat}")
    #challenge_response = encrypt(k1, concat)
    C2, r2 = generate_challenge(secure_vault.N)
    
    payload = f"{r1}#{t1}#{C2}#{r2}"
    print(f"payload: {payload}")
    M3 = encrypt(k1, payload.encode())
    client_socket.sendall(M3)


if __name__ == "__main__":
  #secure_vault.regen_secure_vault()
  main()
